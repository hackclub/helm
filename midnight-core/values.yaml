appVersion: "3.8"
domainName: midnight.example.com

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  annotations: {}
  name: ""

imagePullSecrets: []

imageCredentials:
  enabled: false
  registry: ""
  username: ""
  password: ""
  email: ""

forceRedeploy: false

# #########################################################
# lark-ui service (Frontend UI - SvelteKit Application)
# #########################################################
larkUi:
  replicaCount: 1

  image:
    repository: ghcr.io/hackclub/midnight/lark-ui
    pullPolicy: IfNotPresent
    tag: "latest"

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  service:
    type: ClusterIP
    port: 5173

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

  env:
    NODE_ENV: "production"
    PORT: "5173"
    REDIS_URL: "redis://:${REDIS_PASSWORD}@redis-ha.redis.svc.cluster.local:26379"

  secretEnv:
    DATABASE_URL: "postgres://middb:midpass@postgresql-cluster-rw.postgresql.svc.cluster.local:5432/midprod"
    USER_SERVICE_AIRTABLE_API_KEY: ""
    TUNNEL_TOKEN: ""
    REDIS_PASSWORD: "midnight"

  extraEnvVars: []

  externalConfigMapName: ""
  externalSecretName: ""

# #########################################################
# user-service (User Service - NestJS API)
# #########################################################
userService:
  replicaCount: 1

  image:
    repository: ghcr.io/hackclub/midnight/user-service
    pullPolicy: IfNotPresent
    tag: "latest"

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  service:
    type: ClusterIP
    port: 3002

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

  env:
    NODE_ENV: "production"
    PORT: "3002"
    USER_SERVICE_PORT: "3002"
    USER_SERVICE_NODE_ENV: "production"
    REDIS_URL: "redis://:${REDIS_PASSWORD}@redis-ha.redis.svc.cluster.local:26379"

  secretEnv:
    USER_SERVICE_AIRTABLE_API_KEY: ""
    DATABASE_URL: "postgres://middb:midpass@postgresql-cluster-rw.postgresql.svc.cluster.local:5432/midprod"
    ADMIN_EMAIL_WHITELIST: ""
    REDIS_PASSWORD: "midnight"

  extraEnvVars: []

  externalConfigMapName: ""
  externalSecretName: ""

# #########################################################
# mail-service (Mail Service - NestJS API)
# #########################################################
mailService:
  replicaCount: 1

  image:
    repository: ghcr.io/hackclub/midnight/mail-service
    pullPolicy: IfNotPresent
    tag: "latest"

  podAnnotations: {}

  podSecurityContext: {}

  securityContext: {}

  service:
    type: ClusterIP
    port: 3003

  resources: {}

  nodeSelector: {}

  tolerations: []

  affinity: {}

  env:
    NODE_ENV: "production"
    MAIL_SERVICE_PORT: "3003"
    AWS_REGION: "us-east-1"
    SMTP_HOST: "email-smtp.us-east-1.amazonaws.com"
    SMTP_PORT: "587"
    REDIS_URL: "redis://:${REDIS_PASSWORD}@redis-ha.redis.svc.cluster.local:26379"

  secretEnv:
    MAIL_SERVICE_DATABASE_URL: "postgres://middb:midpass@postgresql-cluster-rw.postgresql.svc.cluster.local:5432/midprod"
    SMTP_USER: ""
    SMTP_PASS: ""
    EMAIL_FROM: ""
    SMIME_PRIVATE_KEY_PATH: ""
    SMIME_CERT_PATH: ""
    SMIME_CHAIN_PATH: ""
    REDIS_PASSWORD: "midnight"

  extraEnvVars: []

  externalConfigMapName: ""
  externalSecretName: ""


# #########################################################
# ingress configuration
# #########################################################
ingress:
  enabled: true
  className: "traefik"
  tls: true
  secretName: "midnight-cert"
  pathType: ImplementationSpecific

  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    traefik.ingress.kubernetes.io/router.entrypoints: web

  # Gateway middleware for routing
  gatewayMiddleware:
    enabled: true

# #########################################################
# PostgreSQL configuration
# #########################################################
postgresql:
  enabled: false

# #########################################################
# Redis configuration
# #########################################################
redis:
  enabled: false

# #########################################################
# Traefik configuration
# #########################################################
traefik:
  enabled: true
  crds:
    enabled: true
  service:
    type: LoadBalancer
  ports:
    web:
      port: 80
    websecure:
      port: 443
